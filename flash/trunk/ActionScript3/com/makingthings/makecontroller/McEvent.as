/********************************************************************************* Copyright 2006 MakingThings Licensed under the Apache License,  Version 2.0 (the "License"); you may not use this file except in compliance  with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. *********************************************************************************//** package */package com.makingthings.makecontroller{	import flash.events.Event;		/** 	An <b>McEvent</b> is an event that alerts you to some new Mchelper-related action.	Register to hear about any of these events using the the <b>addEventListener</b> method.		<h3>Example</h3>	<pre>	var mcFlash:McFlashConnect = new McFlashConnect( );	// set up our listeners	mcFlash.addEventListener( McEvent.ON_CONNECT, onConnect );	mcFlash.addEventListener( McEvent.ON_CONNECT_ERROR, onConnectError );	mcFlash.addEventListener( McEvent.ON_CLOSE, onClose );	mcFlash.addEventListener( McEvent.ON_MESSAGE_IN, onMessageIn );	mcFlash.addEventListener( McEvent.ON_BOARD_ARRIVED, onBoardArrived );	mcFlash.addEventListener( McEvent.ON_BOARD_REMOVED, onBoardRemoved );		// and define the functions that will be listening	function onMessageIn( event:McEvent )	{		var msg:OscMessage = event.data;		trace( "new message: " + msg.toString() );	}		function onConnect( event:McEvent )	{		trace( "Mchelper connected successfully." );	}		function onConnectError( event:McEvent )	{		trace( "Couldn't connect to Mchelper." );	}		function onClose( event:McEvent )	{		trace( "The connection to Mchelper has closed." );	}		function onBoardArrived( event:McEvent )	{		var newBoard:Board == event.data;		trace( "New board connected at " + newBoard.location );	}		function onBoardRemoved( event:McEvent )	{		var removedBoard:Board == event.data;		trace( "Board removed at " + removedBoard.location );	}	</pre>	*/	public class McEvent extends Event	{		/** When your Flash movie has successfully made a connection to Mchelper, this event will be triggered. 		<p>The event's data property is empty.</p> */		public static var ON_CONNECT:String = "onConnect";		/** When your Flash movie cannot successfully make a connection to Mchelper, this event will be triggered. 		<p>The event's data property is empty.</p>  */		public static var ON_CONNECT_ERROR:String = "onConnectError";		/** When the connection between your movie and Mchelper has been broken, this event will be triggered.		<p>The event's data property is empty.</p> */		public static var ON_CLOSE:String = "onClose";		/** This event will be triggered whenever there's a new message coming in from Mchelper to your Flash movie.		<p>The event's data property will contain the <b>OscMessage</b> that has just arrived.</p>  */		public static var ON_MESSAGE_IN:String = "onMessageIn";		/** This event will be triggered whenever a new board is connected to mchelper.		<p>The event's data property will contain a <b>Board</b> object that indicates the board that has been connected.</p> */		public static var ON_BOARD_ARRIVED:String = "onBoardArrived";		/** This event will be triggered whenever a board is disconnected.		<p>The event's data property will contain a <b>Board</b> object that indicates the board that has been removed.</p> */		public static var ON_BOARD_REMOVED:String = "onBoardRemoved";		public var data;				public function McEvent( inType:String, inData = null )		{			super(inType);			data = inData;		}		}}