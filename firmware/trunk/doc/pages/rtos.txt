/*********************************************************************************

 Copyright 2006-2009 MakingThings

 Licensed under the Apache License, 
 Version 2.0 (the "License"); you may not use this file except in compliance 
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0 
 
 Unless required by applicable law or agreed to in writing, software distributed
 under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 CONDITIONS OF ANY KIND, either express or implied. See the License for
 the specific language governing permissions and limitations under the License.

*********************************************************************************/

/**
  \defgroup rtos Multi Threading
 
  \section Overview
  The Make Controller runs an operating system, called ChibiOS (http://chibios.sourceforge.net).
  This makes it \b much easier to do more than one thing at a time in your programs.
  If you want to read from sensors, communicate over the network, communicate via USB, 
  and run a couple motors all at once, the RTOS is a great help.
  
  \section Threads
  Each application has 1 or more threads.  Each thread is a loop that performs part 
  of your application.  loop() is the basic thread that all apps contain, but
  you can create additional threads as well.  Define a thread loop using threadLoop(), and then start
  your thread via createThread().
  
  \section Example
  \code
  #include "core.h"
  
  // define our thread, and reserve 512 bytes of memory for it
  threadLoop(mythread, 512)
  {
    if (ledValue() == ON) {
      ledSetValue(OFF);
    }
    else {
      ledSetValue(ON);
    }
    sleep(100); // sleep for 100 milliseconds, then do it all again
  }
  
  void setup()
  {
    // create our thread with priority of 100 (1 is minimum, 128 is maximum priority)
    createThread(mythread, 100);
  }
  
  void loop()
  {
    
  }
  \endcode
  
  \section Priorities
  Each thread has a priority.  If a thread with a higher priority needs to run, threads
  with lower priority will be suspended until the high priority thread either sleeps or yields.
  Call sleep() to delay for a number of milliseconds, or yield() to pass control to the next
  waiting thread.
  
  \section stacks Thread Stacks
  Each thread has a certain amount of local memory given to it.  The amount of memory required
  depends on your thread - if you have a lot of big buffers, or variables, you'll need more memory.
  Define the amount of memory you need when you define your threadLoop().  512 is a good starting point - 
  if you notice the board is resetting, you probably need to give your thread more memory.
  
  \section Advanced
  ChibiOS provides many interesting features in addition to basic thread management, including queues,
  semaphores, events, message passing and more.  You can access these directly in your
  Make Controller applications, but you'll need to consult the excellent 
  <a href="http://chibios.sourceforge.net/html/index.html">ChibiOS documentation</a> to 
  get all the details on how to do it.
*/